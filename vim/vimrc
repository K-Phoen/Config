" Enable syntax highlighting
syntax on

" enable filetypes
filetype on
filetype plugin indent on

" Set title on X window
set title

" make plugins smoother (don't redraw while executing macros)
set lazyredraw

" Add a line under the cursor (reverse color)
set cursorline

" Behaviors
set nocompatible
set encoding=utf-8
set backspace=indent,eol,start
set autoindent
set ruler                       " Always show current positions along the bottom
set number                      " turn on line numbers

set nobackup                    " Don't make a backup before overwriting a file
set nowritebackup               " And again.
set noswapfile                  " Use an SCM instead of swap files

set shell=zsh                   " Use Zsh as default shell
set wildmenu                    " Enhanced command line completion.
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.pyc,*.pyo,*/cache/**,*/logs/**,*/zend/**,*/bootstrap.* " Ignore certain files

" Uncomment the following to have Vim jump to the last position when reopening
" a file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

" redefine tabs
set expandtab       " no real tabs please!
set shiftwidth=2    " auto-indent amount when using cindent, >>, << and stuff
                    " like that
set softtabstop=2   " when hitting tab or backspace, how many spaces should a
                    " tab be (see expandtab)
set tabstop=2       " real tabs should be 2


" Search
"=======

set hlsearch        " Highlight search matches
set incsearch       " ...dynamically as they are typed.
" Clear search highlight
map <silent> <C-H> :let @/=""<CR>:echo "Cleared search register."<cr>

" These two options, when set together, will make /-style searches
" case-sensitive only if there is a capital letter in the search expression.
" *-style searches continue to be consistently case-sensitive.
set ignorecase
set smartcase



" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
" F2 = toggle paste mode
nnoremap <F2> :set invpaste paste?<Enter>
imap <F2> <C-O><F2>
set pastetoggle=<F2>


" Theme setup
"===========

let &t_Co=256         " force the 256-color mode
set background=light
colorscheme mustang


" Status line
"=============

" set statusline=%F%m%=%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [LINE=%l]\ [Col=%v]\ [%p%%]
set laststatus=2

hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
hi Modified guibg=orange guifg=black ctermbg=lightred ctermfg=black

function! MyStatusLine(mode)
    let statusline=""
    if a:mode == 'Enter'
        let statusline.="%#StatColor#"
    endif
    let statusline.="\(%n\)\ %f\ "
    if a:mode == 'Enter'
        let statusline.="%*"
    endif
    let statusline.="%#Modified#%m"
    if a:mode == 'Leave'
        let statusline.="%*%r"
    elseif a:mode == 'Enter'
        let statusline.="%r%*"
    endif
    let statusline .= "\ (Line %l/%L,\ Col %c)\ %P%=%h%w\ %y\ [%{&encoding}:%{&fileformat}]\ \ "
    return statusline
endfunction

au WinEnter * setlocal statusline=%!MyStatusLine('Enter')
au WinLeave * setlocal statusline=%!MyStatusLine('Leave')
set statusline=%!MyStatusLine('Enter')

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi StatColor guibg=orange ctermbg=lightred
  elseif a:mode == 'r'
    hi StatColor guibg=#e454ba ctermbg=magenta
  elseif a:mode == 'v'
    hi StatColor guibg=#e454ba ctermbg=magenta
  else
    hi StatColor guibg=red ctermbg=red
  endif
endfunction

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black

" Highlight unwanted spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Smart completion
function! SmartComplete()
	let line = getline('.')                         " curline
	let substr = strpart(line, -1, col('.')+1)      " from start to cursor
	let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
	let has_period = match(substr, '\.') != -1      " position of period, if any
	let has_slash = match(substr, '\/') != -1       " position of slash, if any

	if ( has_slash )
		return "\<C-X>\<C-F>"                         " file matching
	elseif &omnifunc != ''
		return "\<C-X>\<C-O>"                         " omnifunc if available
  else
    return "\<C-X>\<C-P>"                         " existing text matching
	endif
endfunction

" Call smart completion when pressing Ctrl-Space
inoremap <C-Space> <c-r>=SmartComplete()<CR>
imap <C-@> <C-Space>

" Toggle line numbers and fold column for easy copying:
nnoremap <C-l> :set nonumber!<CR>:set foldcolumn=0<CR>

" Sudo to write
command W w !sudo tee % > /dev/null

" Plugin specifics
"=================

" define my name for snipmate plugin
let g:snips_author = 'Kevin Gomez <kevin_gomez@carpe-hora.com>'
let g:snips_company = ''

" activate symfony for php files
autocmd FileType php set ft=php.symfony

" taglist plugin
let Tlist_Show_One_File = 1 " only displays the tags for the current buffer
nnoremap <silent> <F10> :TlistToggle<CR>


" Language specifics
"===================

" php
autocmd FileType php noremap <F7> :!php -l %<CR>
autocmd FileType php noremap <F9> :!php %<CR>
autocmd FileType php noremap <C-b> :Bp<CR> " set/remove a breakpoint
let php_htmlInStrings = 1
let php_sql_query = 1

" symfony
autocmd FileType php noremap <F8> :SfSwitchView<CR>

" javascript
autocmd FileType javascript noremap <F7> :!gjslint %<CR>
